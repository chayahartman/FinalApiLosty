//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class losty2022Entities : DbContext
    {
        public losty2022Entities()
            : base("name=losty2022Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblEmailSetting> tblEmailSettings { get; set; }
        public virtual DbSet<tblFinding> tblFindings { get; set; }
        public virtual DbSet<tblItem> tblItems { get; set; }
        public virtual DbSet<tblLoss> tblLosses { get; set; }
        public virtual DbSet<tblQuestion> tblQuestions { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
    
        public virtual int SPaddItem(string itemName)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPaddItem", itemNameParameter);
        }
    
        public virtual int SPaddNewFinding(Nullable<int> userId, string findingName, Nullable<int> itemId, Nullable<System.DateTime> findDate, string findLocation, string findingDescription, string findingModel)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var findingNameParameter = findingName != null ?
                new ObjectParameter("findingName", findingName) :
                new ObjectParameter("findingName", typeof(string));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            var findDateParameter = findDate.HasValue ?
                new ObjectParameter("findDate", findDate) :
                new ObjectParameter("findDate", typeof(System.DateTime));
    
            var findLocationParameter = findLocation != null ?
                new ObjectParameter("findLocation", findLocation) :
                new ObjectParameter("findLocation", typeof(string));
    
            var findingDescriptionParameter = findingDescription != null ?
                new ObjectParameter("findingDescription", findingDescription) :
                new ObjectParameter("findingDescription", typeof(string));
    
            var findingModelParameter = findingModel != null ?
                new ObjectParameter("findingModel", findingModel) :
                new ObjectParameter("findingModel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPaddNewFinding", userIdParameter, findingNameParameter, itemIdParameter, findDateParameter, findLocationParameter, findingDescriptionParameter, findingModelParameter);
        }
    
        public virtual int SPaddNewLost(Nullable<int> userId, string lostName, Nullable<int> itemId, Nullable<System.DateTime> lostDate, string lostLocation, string lostDescription, string lostModel)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var lostNameParameter = lostName != null ?
                new ObjectParameter("lostName", lostName) :
                new ObjectParameter("lostName", typeof(string));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            var lostDateParameter = lostDate.HasValue ?
                new ObjectParameter("lostDate", lostDate) :
                new ObjectParameter("lostDate", typeof(System.DateTime));
    
            var lostLocationParameter = lostLocation != null ?
                new ObjectParameter("lostLocation", lostLocation) :
                new ObjectParameter("lostLocation", typeof(string));
    
            var lostDescriptionParameter = lostDescription != null ?
                new ObjectParameter("lostDescription", lostDescription) :
                new ObjectParameter("lostDescription", typeof(string));
    
            var lostModelParameter = lostModel != null ?
                new ObjectParameter("lostModel", lostModel) :
                new ObjectParameter("lostModel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPaddNewLost", userIdParameter, lostNameParameter, itemIdParameter, lostDateParameter, lostLocationParameter, lostDescriptionParameter, lostModelParameter);
        }
    
        public virtual int SPaddQuestion(string content, Nullable<int> findingId)
        {
            var contentParameter = content != null ?
                new ObjectParameter("content", content) :
                new ObjectParameter("content", typeof(string));
    
            var findingIdParameter = findingId.HasValue ?
                new ObjectParameter("findingId", findingId) :
                new ObjectParameter("findingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPaddQuestion", contentParameter, findingIdParameter);
        }
    
        public virtual int SPaddUser(string name, string email, string password)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPaddUser", nameParameter, emailParameter, passwordParameter);
        }
    
        public virtual int SPdeleteItem(Nullable<int> itemrId)
        {
            var itemrIdParameter = itemrId.HasValue ?
                new ObjectParameter("itemrId", itemrId) :
                new ObjectParameter("itemrId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPdeleteItem", itemrIdParameter);
        }
    
        public virtual ObjectResult<SPfindingsPerUser_Result> SPfindingsPerUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPfindingsPerUser_Result>("SPfindingsPerUser", userIdParameter);
        }
    
        public virtual ObjectResult<SPgetAllFindingQuestions_Result> SPgetAllFindingQuestions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetAllFindingQuestions_Result>("SPgetAllFindingQuestions");
        }
    
        public virtual ObjectResult<SPgetAllFindings_Result> SPgetAllFindings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetAllFindings_Result>("SPgetAllFindings");
        }
    
        public virtual ObjectResult<SPgetAllFindingsQuestions_Result> SPgetAllFindingsQuestions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetAllFindingsQuestions_Result>("SPgetAllFindingsQuestions");
        }
    
        public virtual ObjectResult<SPgetAllLosses_Result> SPgetAllLosses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetAllLosses_Result>("SPgetAllLosses");
        }
    
        public virtual ObjectResult<string> SPgetDefaultQuestions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPgetDefaultQuestions");
        }
    
        public virtual ObjectResult<SPgetEmailSettingsList_Result> SPgetEmailSettingsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetEmailSettingsList_Result>("SPgetEmailSettingsList");
        }
    
        public virtual ObjectResult<string> SPgetFindingQuestions(Nullable<int> findingId)
        {
            var findingIdParameter = findingId.HasValue ?
                new ObjectParameter("findingId", findingId) :
                new ObjectParameter("findingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPgetFindingQuestions", findingIdParameter);
        }
    
        public virtual ObjectResult<SPgetItemsList_Result> SPgetItemsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetItemsList_Result>("SPgetItemsList");
        }
    
        public virtual ObjectResult<SPgetQuestionsList_Result> SPgetQuestionsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetQuestionsList_Result>("SPgetQuestionsList");
        }
    
        public virtual ObjectResult<string> SPgetUserEmail(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPgetUserEmail", userIdParameter);
        }
    
        public virtual ObjectResult<SPgetUsersList_Result> SPgetUsersList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPgetUsersList_Result>("SPgetUsersList");
        }
    
        public virtual ObjectResult<SPlosessPerUser_Result> SPlosessPerUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPlosessPerUser_Result>("SPlosessPerUser", userIdParameter);
        }
    
        public virtual ObjectResult<SPlostDetails_Result> SPlostDetails(Nullable<int> lostId)
        {
            var lostIdParameter = lostId.HasValue ?
                new ObjectParameter("lostId", lostId) :
                new ObjectParameter("lostId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPlostDetails_Result>("SPlostDetails", lostIdParameter);
        }
    
        public virtual ObjectResult<SPsearchCorrespondingFindings_Result> SPsearchCorrespondingFindings(string lostLocation, Nullable<int> itemId)
        {
            var lostLocationParameter = lostLocation != null ?
                new ObjectParameter("lostLocation", lostLocation) :
                new ObjectParameter("lostLocation", typeof(string));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPsearchCorrespondingFindings_Result>("SPsearchCorrespondingFindings", lostLocationParameter, itemIdParameter);
        }
    
        public virtual ObjectResult<SPsearchCorrespondingLosses_Result> SPsearchCorrespondingLosses(string findLocation, Nullable<int> itemId)
        {
            var findLocationParameter = findLocation != null ?
                new ObjectParameter("findLocation", findLocation) :
                new ObjectParameter("findLocation", typeof(string));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPsearchCorrespondingLosses_Result>("SPsearchCorrespondingLosses", findLocationParameter, itemIdParameter);
        }
    
        public virtual int SPupdateFindingStatus(Nullable<int> findingId, Nullable<int> status)
        {
            var findingIdParameter = findingId.HasValue ?
                new ObjectParameter("findingId", findingId) :
                new ObjectParameter("findingId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPupdateFindingStatus", findingIdParameter, statusParameter);
        }
    
        public virtual int SPupdateLostStatus(Nullable<int> lostId, Nullable<int> status)
        {
            var lostIdParameter = lostId.HasValue ?
                new ObjectParameter("lostId", lostId) :
                new ObjectParameter("lostId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPupdateLostStatus", lostIdParameter, statusParameter);
        }
    }
}
